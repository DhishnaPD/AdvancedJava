/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.55
 * Generated at: 2024-12-22 05:57:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.File;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import java.util.List;
import java.util.Iterator;
import java.sql.*;

public final class fileUploadDriver_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.apache.commons.fileupload.disk.DiskFileItemFactory");
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("org.apache.commons.fileupload.FileItem");
    _jspx_imports_classes.add("org.apache.commons.fileupload.servlet.ServletFileUpload");
    _jspx_imports_classes.add("java.io.File");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" <!-- If you're saving to DB, include JDBC imports -->\r\n");

    // Define max sizes for the upload
    int maxMemorySize = 5000 * 1024;  // 5 MB in memory
    int maxFileSize = 5000 * 1024;    // 5 MB for the max file size
    String uploadDirectory = "D:/eclipse/imageupload/src/main/webapp/uploads/";  // Update the path for your environment
   //String uploadDirectory = "uploads/";
    // Ensure the upload directory exists
    File uploadDir = new File(uploadDirectory);
    if (!uploadDir.exists()) {
        uploadDir.mkdirs();  // Create the directory (and parent directories) if it doesn't exist
    }

    String contentType = request.getContentType();
    if (contentType != null && contentType.indexOf("multipart/form-data") >= 0) {
        DiskFileItemFactory diskFileItemFactory = new DiskFileItemFactory();
        diskFileItemFactory.setSizeThreshold(maxMemorySize);  // Set size threshold in memory
        diskFileItemFactory.setRepository(new File(uploadDirectory));  // Temporary directory for files larger than threshold

        ServletFileUpload upload = new ServletFileUpload(diskFileItemFactory);
        upload.setSizeMax(maxFileSize);  // Set max file size for uploads

        try {
            // Parse the request to extract file items
            List<FileItem> fileItems = upload.parseRequest(request);
            Iterator<FileItem> iterator = fileItems.iterator();
            
            while (iterator.hasNext()) {
                FileItem fileItem = iterator.next();
                
                // Process the uploaded file (not form fields)
                if (!fileItem.isFormField()) {
                    String fileName = fileItem.getName();
                    // For Windows, remove the full path and get only the file name
                    fileName = fileName.substring(fileName.lastIndexOf("\\") + 1);
                    
                    // Ensure a unique file name to avoid overwriting
                    File file = new File(uploadDirectory + fileName);
                    String uniqueFileName = null;
                    if (file.exists()) {
                        // If the file exists, append a timestamp or unique identifier
                        uniqueFileName = System.currentTimeMillis() + "_" + fileName;
                        out.println("uniquefilename"+uniqueFileName);
                        file = new File(uploadDirectory + uniqueFileName);
                        
                    }
                    
                    // Write the uploaded file to the target directory
                    fileItem.write(file);  // Save the file to disk
                    
                    // Optionally, you can store the file path into a database
                    // (if you're keeping track of uploaded files)
                    String filePath = uploadDirectory + file.getName();
                    // Example DB insertion (update with your DB details)
                    Connection connection = null;
                    PreparedStatement statement = null;
                    try {
                    	Class.forName("com.mysql.cj.jdbc.Driver");
                        String dbURL = "jdbc:mysql://localhost:3306/java1";  // Change DB URL
                        String dbUser = "root";  // Change DB user
                        String dbPassword = "root";  // Change DB password
                        connection = DriverManager.getConnection(dbURL, dbUser, dbPassword);
                        
                        String sql = "INSERT INTO images (image) VALUES (?)";  // Example query
                        statement = connection.prepareStatement(sql);
                        statement.setString(1, uniqueFileName);
                        statement.executeUpdate();
                    } catch (SQLException e) {
                        out.println("Database error: " + e.getMessage());
                    } finally {
                        if (connection != null) {
                            connection.close();
                        }
                        if (statement != null) {
                            statement.close();
                        }
                    }

                    out.println("File uploaded successfully: " + uniqueFileName);
                }
            }
        } catch (Exception e) {
            out.println("Error during file upload: " + e.getMessage());
        }
    } else {
        out.println("Form is not submitted with multipart/form-data.");
    }

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
